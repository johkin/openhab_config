import org.joda.time.*
import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DecimalType
import org.openhab.core.library.types.DateTimeType
import org.openhab.core.library.items.SwitchItem

val Integer nightLevel = 13
val Integer dayLevel = 90
val Integer minutesOn = 10

var Integer level

rule "Shower, Initialization"
when
	System started
then
	if (Mode.state == 1) {
		level = nightLevel
	} else {
		level = dayLevel
	}
end	

rule "Shower, Turn off by schedule"
when
	Time cron "0 */5 * ? * *"
then
	if (Shower_Motion_Sensor.state == CLOSED) {
		logDebug("Shower", "Check latest movement {}", Shower_Motion_Sensor.lastUpdate)
		val Period delayPeriod = new Period().withMinutes(minutesOn)
		val lastUpdate = new DateTime(Shower_Motion_Sensor.lastUpdate)
		
		if (lastUpdate.plus(delayPeriod).beforeNow) {
			if (Shower_Dimmer.state != 0) {
				logDebug("shower", "Turning off dimmer")
				sendCommand(Shower_Dimmer, OFF)	
			}
			if (Shower_Bench_Light.state == ON) {
				logDebug("shower", "Turning off bench lights")
				sendCommand(Shower_Bench_Light, OFF)	
			}
			if (Shower_Mirror_Light.state == ON) {
				logDebug("shower", "Turning off mirror ligths")
				sendCommand(Shower_Mirror_Light, OFF)	
			}
		}	
	}
end

rule "Shower, Turn on by movement"
when
	Item Shower_Motion_Sensor changed to OPEN
then
	logDebug("shower", "Shower_Motion_Sensor.state {}", Shower_Motion_Sensor.state)
	logDebug("shower", "Shower_Dimmer.state {}", Shower_Dimmer.state)
	if (Shower_Dimmer.state == 0){
		logDebug("shower", "Turning on dimmer: {}", level)
		sendCommand(Shower_Dimmer, level)	
	}
	
end	

rule "Shower, Ajust level at change of Mode"
when
	Item Mode changed
then
	logDebug("shower", "Adjust level, Mode.state {}", Mode.state)
	if (Mode.state == 1) {
		level = nightLevel
	} else {
		level = dayLevel
	}
	logDebug("shower", "Adjust level {}", level)
	logDebug("shower", "Adjust level Shower_Dimmer.state {}", Shower_Dimmer.state)
	if (Shower_Dimmer.state != 0) {
		sendCommand(Shower_Dimmer, level)	
	}
end

rule "Shower, Store new level"
when 
	Item Shower_Dimmer changed
then
	
	logDebug("shower", "Shower_Dimmer.state {}", Shower_Dimmer.state)
	if (Shower_Dimmer.state != 0) {
		level = (Shower_Dimmer.state as DecimalType).intValue
		logDebug("shower", "Stored new dimmer level {}", level)
	}
end