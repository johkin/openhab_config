import org.joda.time.*
import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DecimalType
import org.openhab.core.library.types.DateTimeType
import org.openhab.core.library.items.SwitchItem

import java.util.concurrent.locks.ReentrantLock

var Timer offTimer

var Integer minutesOn = 30

val ReentrantLock lock  = new ReentrantLock()

rule "Initiering"
when
	System started
then
	try {
		lock.lock
		
		sendCommand(Mode, 0)
		
		logDebug("mode", "Intiering, skapar timer.")
		offTimer = createTimer(now.plusMinutes(minutesOn)) [|
			logDebug("mode", "Ingen rörelse inom angiven tid {}", minutesOn)
			// All_Lights.allMembers.forEach[light| sendCommand(light, OFF)]
		]
			
	} finally {
		lock.unlock
	}
end

rule "Destruering"
when
	System shuts down
then
	try {
		lock.lock
		logDebug("mode", "Destruerar, kontrollerar timer")
		if (offTimer != null) {
			logDebug("mode", "Tar bort befintlig timer")
			offTimer.cancel
			offTimer = null
		}
			
	} finally {
		lock.unlock
	}
end



rule "Registrera rörelse"
when
	Item gMotionSensorIndoor changed to OPEN
then
	try {
		lock.lock
		
		logDebug("mode", "Minst en sensor är Open, tar bort timer.")
		if (offTimer != null) {
			offTimer.cancel
			offTimer = null
		}
		
		if (now.getHourOfDay() > 5 && now.getHourOfDay() < 22) {
			logDebug("mode", "Ändrar läge till dag.")
			sendCommand(Mode, 0)
		} else if (Mode.state == 2 || Mode.state == 3) {
			logDebug("mode", "Ändrar läge till natt.")
			sendCommand(Mode, 1)
		}
		
		
	} finally {
		lock.unlock
	}
end

rule "Ingen rörelse"
when
	Item gMotionSensorIndoor changed to CLOSED
then
	try {
		lock.lock
		
		if(gMotionSensorIndoor.allMembers.filter([sensor| 
			sensor.state == OPEN]).empty) {
			logDebug("mode", "Alla sensorer är Closed, tar bort befintlig timer")
			if (offTimer != null) {
				offTimer.cancel
				offTimer = null
			}
			logDebug("mode", "Skapar ny timer")
			offTimer = createTimer(now.plusMinutes(minutesOn)) [|
				logDebug("mode", "Ingen rörelse inom angiven tid {}", minutesOn)
				if (Mode.state == 0) {
					if (now.getHourOfDay() > 22 && now.getHourOfDay() < 5) {
						logDebug("mode", "Ändrar läge till natt.")
						sendCommand(Mode, 1)
					} else {
						logDebug("mode", "Ändrar läge till borta.")
						sendCommand(Mode, 2)
					}
				} 
			]
		} 
		
	} finally {
		lock.unlock
	}
end

rule "Kontrollera senaste lägesändring"
when
	Time cron "0 0 7,19 ? * *"
then
	logDebug("mode", "Senaste ändring av läge {}", Mode.lastUpdate)
	if (Mode.state != 3) {
		if (Mode.lastUpdate.before(now.minusDays(1).toDate)) {
			logDebug("mode", "Ändrar läge till semester.")
			sendCommand(Mode, 3)
		}	
	}
end