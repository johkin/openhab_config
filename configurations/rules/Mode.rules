import org.joda.time.*
import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DecimalType
import org.openhab.core.library.types.DateTimeType
import org.openhab.core.library.items.SwitchItem

import java.util.concurrent.locks.ReentrantLock

var Timer offTimer

var Integer minutesOn = 120

val ReentrantLock lock  = new ReentrantLock()

rule "Initiering"
when
	System started
then
	try {
		lock.lock
		
		sendCommand(Mode, 0)
		
		logDebug("mode", "Intiering, skapar timer.")
		offTimer = createTimer(now.plusMinutes(minutesOn)) [|
			logDebug("mode", "Ingen rörelse inom angiven tid {}", minutesOn)
			// All_Lights.allMembers.forEach[light| sendCommand(light, OFF)]
		]
			
	} finally {
		lock.unlock
	}
end

rule "Destruering"
when
	System shuts down
then
	try {
		lock.lock
		logDebug("mode", "Destruerar, kontrollerar timer")
		if (offTimer != null) {
			logDebug("mode", "Tar bort befintlig timer")
			offTimer.cancel
			offTimer = null
		}
			
	} finally {
		lock.unlock
	}
end

rule "Avsluta timer vid rörelse"
when
	Item gMotionSensorIndoor changed
then
	try {
		lock.lock
		
		logDebug("mode", "Rörelse ändrad")
		if(gMotionSensorIndoor.allMembers.filter([sensor| 
			sensor.state == OPEN]).empty) {
			logDebug("mode", "Alla sensorer är Closed, tar bort befintlig timer")
			if (offTimer != null) {
				offTimer.cancel
				offTimer = null
			}
			logDebug("mode", "Skapar ny timer")
			offTimer = createTimer(now.plusMinutes(minutesOn)) [|
				logDebug("mode", "Ingen rörelse inom angiven tid {}", minutesOn)
				// All_Lights.allMembers.forEach[light| sendCommand(light, OFF)]
			]
		} else {
			logDebug("mode", "Minst en sensor är Open, tar bort timer.")
			if (offTimer != null) {
				offTimer.cancel
				offTimer = null
			}
		}
		
	} finally {
		lock.unlock
	}
end