import org.joda.time.*
import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DecimalType
import org.openhab.core.library.types.DateTimeType
import org.openhab.core.library.items.SwitchItem

var Timer offTimer


var Integer minutesOn = 120

rule "Initiering"
when
	System started
then
	logDebug("mode", "Intiering, skapar timer.")
	offTimer = createTimer(now.plusMinutes(minutesOn)) [|
		logDebug("mode", "Ingen rörelse inom angiven tid {}", minutesOn)
		// All_Lights.allMembers.forEach[light| sendCommand(light, OFF)]
	]
end
/*
rule "Avsluta timer vid rörelse"
when
	Item gMotionSensor received update
then
	logDebug("mode", "Rörelse upptäckt")
	gMotionSensor.allMembers.forEach[sensor |
		
		logDebug("mode", "Rörelse upptäckt, tar bort timer.")
		if (offTimer != null) {
			offTimer.cancel
			offTimer = null
		} 
		if (sensor.state == OPEN) {
			logDebug("mode", "Hittade triggad sensor {}", sensor.name)
			return				
		} else {
			logDebug("mode", "Skapar timer.")
			offTimer = createTimer(now.plusMinutes(minutesOn)) [|
			logDebug("mode", "Ingen rörelse inom angiven tid {}", minutesOn)
				// All_Lights.allMembers.forEach[light| sendCommand(light, OFF)]	
			]
		}
	]
end
	

rule "Avsluta timer vid rörelse"
when
	Item gMotionSensor changed to OPEN
then
	logDebug("mode", "Rörelse upptäckt, tar bort timer.")
	if (offTimer != null) {
		offTimer.cancel
		offTimer = null
	}
	
end

rule "Starta timer utan rörelse" 
when
	Item gMotionSensor changed to CLOSED
then
	logDebug("mode", "Ingen rörelse, kontrollerar timer.")
	if (offTimer == null) {
		logDebug("mode", "Skapar timer.")
		offTimer = createTimer(now.plusMinutes(minutesOn)) [|
			logDebug("mode", "Ingen rörelse inom angiven tid {}", minutesOn)
			// All_Lights.allMembers.forEach[light| sendCommand(light, OFF)]	
		]	
	}
end
*/