import org.joda.time.*
import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DecimalType
import org.openhab.core.library.types.DateTimeType
import org.openhab.core.library.items.SwitchItem

val Integer nightLevel = 6
val Integer dayLevel = 50
val Integer minutesOn = 10

var Integer level

 
rule "Bathroom, Initialization"
when
	System started
then
	if (Mode.state == 1) {
		level = nightLevel
	} else {
		level = dayLevel
	}
end	

rule "Bathroom, Turn off with schedule"
when
Time cron "0 */5 * ? * *"
then
	if (Bathroom_Motion_Sensor.state == CLOSED) {
		logDebug("Bathroom", "Kontrollera senaste rörelse {}", Bathroom_Motion_Sensor.lastUpdate)
		val Period delayPeriod = new Period().withMinutes(minutesOn)
		val lastUpdate = new DateTime(Bathroom_Motion_Sensor.lastUpdate)
		
		if (lastUpdate.plus(delayPeriod).beforeNow) {
			if (Bathroom_Dimmer.state != 0) {
				logDebug("Bathroom", "Släcker dimmer")
				sendCommand(Bathroom_Dimmer, OFF)	
			}
			if (Bathroom_Mirror_Light.state == ON) {
				logDebug("Bathroom", "Släcker spegel")
				sendCommand(Bathroom_Mirror_Light, OFF)	
			}
		}	
	}
end

rule "Bathroom, Turn on by movement"
when
	Item Bathroom_Motion_Sensor changed to OPEN
then
	logDebug("Bathroom", "Bathroom_Motion_Sensor.state {}", Bathroom_Motion_Sensor.state)
	logDebug("Bathroom", "Bathroom_Dimmer.state {}", Bathroom_Dimmer.state)
	if (Bathroom_Dimmer.state == 0){
		logDebug("Bathroom", "Tänder belysning: {}", level)
		sendCommand(Bathroom_Dimmer, level)	
	}
	
end	

rule "Bathroom, Adjust level at change of Mode"
when
	Item Mode changed
then
	logDebug("Bathroom", "Justera ljusstyrka Mode.state {}", Mode.state)
	if (Mode.state == 1) {
		level = nightLevel
	} else {
		level = dayLevel
	}
	logDebug("Bathroom", "Justera ljusstyrka level {}", level)
	logDebug("Bathroom", "Justera ljusstyrka Bathroom_Dimmer.state {}", Bathroom_Dimmer.state)
	if (Bathroom_Dimmer.state != 0) {
		sendCommand(Bathroom_Dimmer, level)	
	}
end

rule "Bathroom, Store changed level"
when 
	Item Bathroom_Dimmer changed
then
	logDebug("Bathroom", "Bathroom_Dimmer.state {}", Bathroom_Dimmer.state)
	if (Bathroom_Dimmer.state != 0) {
		level = (Bathroom_Dimmer.state as DecimalType).intValue
		logDebug("Bathroom", "Stored new dimmer level {}", level)
	}
end