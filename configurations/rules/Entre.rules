import org.joda.time.*
import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DecimalType
import org.openhab.core.library.types.DateTimeType
import org.openhab.core.library.items.SwitchItem

val Integer nightLevel = 6
val Integer dayLevelHigh = 100
val Integer dayLevelLow = 25
val Integer minutesHighOn = 10
val Integer minutesLowOn = 120
val Integer minLightLevel = 90

var Integer level

rule "Entre, Initialization"
when
	System started
then
	level = switch (Mode.state) {
		case 0: dayLevelHigh  
		case 1: nightLevel
		case 2: dayLevelLow
		default: dayLevelHigh
	}
end	

rule "Entre, Adjust level at change of Mode"
when
	Item Mode changed
then
	logDebug("entre", "Adjust level Mode.state {}", Mode.state)
	level = switch (Mode.state) {
		case 0: dayLevelHigh  
		case 1: nightLevel
		case 2: dayLevelLow
		case 3: dayLevelHigh
	}
	logDebug("entre", "Ajust level {}", level)
	logDebug("entre", "Adjust level Entre_Dimmer.state {}", Entre_Dimmer.state)
	if (Entre_Dimmer.state != 0) {
		sendCommand(Entre_Dimmer, level)	
	}
end

rule "Entre, Turn on lights by movement"
when
	Item Entre_Motion_Sensor changed to OPEN
then
	logDebug("entre", "Entre_Motion_Sensor.state {}", Entre_Motion_Sensor.state)
	logDebug("entre", "Entre_Dimmer.state {}", Entre_Dimmer.state)
	if (Entre_Light_Sensor.state <= minLightLevel) {
		if (Mode.state == 0 && Entre_Dimmer.state == dayLevelLow) {
			level == dayLevelHigh
			logDebug("entre", "Raise level: {}", level)
			sendCommand(Entre_Dimmer, level)
		} else if (Entre_Dimmer.state == 0){
			logDebug("entre", "Turning on lights: {}", level)
			sendCommand(Entre_Dimmer, level)	
		}	
	}
end

rule "Entre, Turn on lights when dark"
when
	Item Entre_Light_Sensor changed
then
	logDebug("entre", "Entre_Light_Sensor.state {}", Entre_Light_Sensor.state)
	logDebug("entre", "Entre_Motion_Sensor.state {}", Entre_Motion_Sensor.state)
	logDebug("entre", "Entre_Dimmer.state {}", Entre_Dimmer.state)
	if (Entre_Light_Sensor.state <= minLightLevel) {
		if (Entre_Motion_Sensor.state == OPEN) {
			if (Mode.state == 0 && Entre_Dimmer.state == dayLevelLow) {
				level == dayLevelHigh
				logDebug("entre", "Raise level to: {}", level)
				sendCommand(Entre_Dimmer, level)
			} else if (Entre_Dimmer.state == 0){
				logDebug("entre", "Turning on lights: {}", level)
				sendCommand(Entre_Dimmer, level)	
			}	
		}
	} else {
			
	}
end

rule "Entre, Turn off by schedule"
when
	Time cron "0 */5 * ? * *"
then
	if (Entre_Motion_Sensor.state == CLOSED && Entre_Dimmer.state != 0) {
		logDebug("entre", "Check latest movement {}", Entre_Motion_Sensor.lastUpdate)
		val lastUpdate = new DateTime(Entre_Motion_Sensor.lastUpdate)
		
		val Period offPeriod = switch Mode.state {
			case 0 : new Period().withMinutes(minutesLowOn)
			case 1 : new Period().withMinutes(minutesHighOn)
			case 2 : new Period().withMinutes(minutesLowOn)
			default : new Period().withMinutes(minutesLowOn)
		}
		val Period decreasePeriod = switch Mode.state {
			case 0 : new Period().withMinutes(minutesHighOn)
			default : null
		}
		if (lastUpdate.plus(offPeriod).beforeNow) {
			logDebug("entre", "Turning off lights")
			sendCommand(Entre_Dimmer, OFF)	
		} else if (decreasePeriod != null && lastUpdate.plus(decreasePeriod).beforeNow) {
			if (Entre_Dimmer.state > dayLevelLow) {
				logDebug("entre", "Lower level to {}", dayLevelLow)
				sendCommand(Entre_Dimmer, dayLevelLow)	
			}
		}	
	}
end

rule "Entre, Store new level"
when 
	Item Entre_Dimmer changed
then
	
	logDebug("entre", "Entre_Dimmer.state {}", Entre_Dimmer.state)
	if (Entre_Dimmer.state != 0 && Entre_Dimmer.state != dayLevelLow) {
		level = (Entre_Dimmer.state as DecimalType).intValue
		logDebug("entre", "Stored new dimmer level {}", level)
	} 
end