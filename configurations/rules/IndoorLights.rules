import org.joda.time.*
import org.openhab.core.library.types.DateTimeType
import org.openhab.core.library.types.PercentType
import org.openhab.core.library.items.SwitchItem
import org.openhab.core.items.GenericItem
import java.util.*

/* Presence, 0=HOME, 1=NIGHT, 2=AWAY 3=Vacation*/

val List<SwitchItem> pointLights = new ArrayList<SwitchItem>()

rule "IndoorLights, Turn on lights when home"
when 
	Item Presence changed to 0
then
	logDebug("IndoorLights", "Number of lights to turn on {}", pointLights.size)
	pointLights.forEach[
		light | 
		light.sendCommand(ON)
	]
	pointLights.clear()
end

rule "IndoorLights, Turn off lights when away"
when 
	Item Presence changed to 2
then
	pointLights.clear()
	gPointLight.allMembers.forEach[
		light | 
		if (light.acceptedCommandTypes.contains(PercentType.class)) {
			if (light.state != PercentType.ZERO) {
				light.sendCommand(OFF)
				logDebug("IndoorLights", "Adding dimmer {}", light)
				pointLights.add(light as SwitchItem)
			}
		} else {
			if (light.state != OFF) {
				light.sendCommand(OFF)
				logDebug("IndoorLights", "Adding switch {}", light)
				pointLights.add(light as SwitchItem)
			}	
		}
		
	]
	gCeilingLight.allMembers.forEach[
		light | 
		if (light.state != OFF) {
			light.sendCommand(OFF)
		}
	]
end

rule "IndoorLights, Turn off lights when night"
when 
	Item Mode changed to 1
then
	gPointLight.allMembers.forEach[
		light | 
		if (light.state != OFF) {
			light.sendCommand(OFF)
		}
	]
	pointLights.clear()
end