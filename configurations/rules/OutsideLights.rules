import org.joda.time.*
import org.openhab.core.library.types.DateTimeType
import org.openhab.core.library.items.SwitchItem

rule "Släck utebelysning om den är tänd av rörelse"
when
	Item Outdoor_Motion_Sensor_Active changed to OFF
then
	val SunriseTime = Sunrise_Time.state as DateTimeType
    val jodaSunriseTime = new DateTime(SunriseTime.calendar.timeInMillis)
    
    if (jodaSunriseTime.beforeNow) {
		logDebug("utebelysning", "Soluppgång före avstängning av rörelsekontroll")
		gOutsideLights.allMembers.forEach[light | light.sendCommand(OFF)]	
	}
end

rule "Tänd utebelysning eftermiddag"
when
	Item Sunset_Event changed to ON
then
	gOutsideLights.allMembers.forEach[light| light.sendCommand(ON)]
end

rule "Tänd utebelysning morgon, vardag"
when
	Time cron "0 0 6 ? * MON-FRI"
then
	logDebug("utebelysning", "Tid för tändning")
	val SunriseTime = Sunrise_Time.state as DateTimeType
    val jodaSunriseTime = new DateTime(SunriseTime.calendar.timeInMillis)
    
	if (jodaSunriseTime.afterNow) {
		logDebug("utebelysning", "Soluppgång efter tändning")
		gOutsideLights.allMembers.forEach[light| light.sendCommand(ON)]	
	}
	logDebug("utebelysning", "Sätter controlledByMotion = false")
	sendCommand(Outdoor_Motion_Sensor_Active, OFF)
end

rule "Tänd utebelysning morgon, helg"
when
	Time cron "0 0 7 ? * SAT-SUN"
then
	logDebug("utebelysning", "Tid för tändning")
	val SunriseTime = Sunrise_Time.state as DateTimeType
    val jodaSunriseTime = new DateTime(SunriseTime.calendar.timeInMillis)
    
	if (jodaSunriseTime.afterNow) {
		logDebug("utebelysning", "Soluppgång efter tändning")
		gOutsideLights.allMembers.forEach[light| sendCommand(light, ON)]	
	}
	logDebug("utebelysning", "Sätter controlledByMotion = false")
	sendCommand(Outdoor_Motion_Sensor_Active, OFF)
end


rule "Släck utebelysning morgon"
when
	Item Sunrise_Event changed to ON
then
	gOutsideLights.allMembers.forEach[light| light.sendCommand(OFF)]
end

rule "Släck utebelysning kväll, vardag"
when
	Time cron "0 30 22 ? * MON-THU,SUN"
then
	logDebug("utebelysning", "Tid för släckning")
	gOutsideLights.allMembers.forEach[light| light.sendCommand(OFF)]
	logDebug("utebelysning", "Sätter controlledByMotion = true")
	sendCommand(Outdoor_Motion_Sensor_Active, ON)
end

rule "Släck utebelysning kväll, helg"
when
	Time cron "0 30 23 ? * FRI-SAT"
then
	logDebug("utebelysning", "Tid för släckning")
	gOutsideLights.allMembers.forEach[light| light.sendCommand(OFF)]
	logDebug("utebelysning", "Sätter controlledByMotion = true")
	sendCommand(Outdoor_Motion_Sensor_Active, ON)
end

rule "Tänd utebelysning vid rörelse förråd"
when
	Item BackSide_Motion_Sensor changed to OPEN
then
	logDebug("utebelysning", "Rörelse från förrådet")
	if (Outdoor_Motion_Sensor_Active.state == ON) {
		logDebug("utebelysning", "Tänder belysning")
		BackSide_Light_Switch.sendCommand(ON)
	}
end

rule "Släck utebelysning vid rörelse förråd"
when
	Item BackSide_Motion_Sensor changed to CLOSED
then
	logDebug("utebelysning", "State " + BackSide_Motion_Sensor.state)
	logDebug("utebelysning", "Ingen rörelse från förrådet")
	if (Outdoor_Motion_Sensor_Active.state == ON) {
		BackSide_Light_Switch.sendCommand(OFF)
	}
end

rule "Tänd utebelysning vid rörelse framsida"
when
	Item FrontSide_Motion_Sensor changed to OPEN
then
	logDebug("utebelysning", "Rörelse från framsida")
	if (Outdoor_Motion_Sensor_Active.state == ON) {
		logDebug("utebelysning", "Tänder belysning")
		FrontSide_Light_Switch.sendCommand(ON)
	}
end

rule "Släck utebelysning vid rörelse framsida"
when
	Item FrontSide_Motion_Sensor changed to CLOSED
then
	logDebug("utebelysning", "Ingen rörelse från framsida")
	if (Outdoor_Motion_Sensor_Active.state == ON) {
		logDebug("utebelysning", "släcker belysning")
		FrontSide_Light_Switch.sendCommand(OFF)
	}
end